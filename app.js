
var Bot = require('node-telegram-bot-api')
var watson = require('watson-developer-cloud');
var request = require('request');
var speech_to_text = watson.speech_to_text({
 username: 'f996c983-c8e7-4e3f-8b0d-419d92b40bc2', //username from VCAP SERVICES
 password: 'Xv3L5Xofcqsw', //password from VCAP SERVICES
 version: 'v1',
 url: 'https://stream.watsonplatform.net/speech-to-text/api'
});
var params = {
  model: 'pt-BR_BroadbandModel', //you can change the language here
  content_type: 'audio/ogg;codecs=opus',
  continuous: true,
  interim_results: false
};
var conversation = watson.conversation({
	url: 'https://gateway.watsonplatform.net/conversation/api',
	username: '308f8166-3fcb-42b4-973d-326e8401af90',
	password: 'JY7u48JsuR6i',
	version_date: '2016-07-11',
	version: 'v1'
});
var conversation_id = '';
var context = {};
var bot = new Bot('273517451:AAHiieomrFzaZcJyOpw7Y6h0gfBYiJ_NFeU', { polling: true }); //token generated by the bot you created
bot.on('message', function (msg) {
	if(msg['voice']){ return onVoiceMessage(msg); }
});
function onVoiceMessage(msg){
	var chatId = msg.chat.id;
	bot.getFileLink(msg.voice.file_id).then(function(link){
 //setup new recognizer stream
 var recognizeStream = speech_to_text.createRecognizeStream(params);
 recognizeStream.setEncoding('utf8');
 recognizeStream.on('results', function(data){
 	if(data && data.results && data.results.length>0 && data.results[0].alternatives && data.results[0].alternatives.length>0){
 		var result = data.results[0].alternatives[0].transcript;
 		console.log("result: ", result);
 //send speech recognizer result back to chat
 bot.sendMessage(chatId, result, {
 	disable_notification: true,
 	reply_to_message_id: msg.message_id
 }).then(function () {
 // reply sent!
});
}

});
 ['data', 'error', 'connection-close'].forEach(function(eventName){
 	recognizeStream.on(eventName, console.log.bind(console, eventName + ' event: '));
 });
 //pipe voice message to recognizer -> send to watson
 request(link).pipe(recognizeStream);
});
}
/*eslint-env node*/
//------------------------------------------------------------------------------
// node.js starter application for Bluemix
//------------------------------------------------------------------------------
// This application uses express as its web server
// for more info, see: http://expressjs.com
var express = require('express');
// cfenv provides access to your Cloud Foundry environment
// for more info, see: https://www.npmjs.com/package/cfenv
var cfenv = require('cfenv');
// create a new express server
var app = express();
// serve the files out of ./public as our main files
app.use(express.static(__dirname + '/public'));
// get the app environment from Cloud Foundry
var appEnv = cfenv.getAppEnv();
// start server on the specified port and binding host
app.listen(appEnv.port, '0.0.0.0', function() {
  // print a message when the server starts listening
  console.log("server starting on " + appEnv.url);
});